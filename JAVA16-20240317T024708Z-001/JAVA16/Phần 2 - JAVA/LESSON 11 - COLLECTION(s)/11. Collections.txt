Phần I: LIST
================================================
Ex01: List raw type verus List Generic
Ex02: Operation List<String> Integer
+ add, remove, set, get, contains, removeIf, sorting
Ex03: Handle with bulk, huge elements
+ addAll
+ removeAll
+ retailAll
Ex04: Operation with Item(id, name, price, storeId) type
+ contains, remove
+ reverse, suffle
+ sorting
+ Giải thích internal build với equals method
Ex05: ArrayList vs LinkedList

Phần 2: GENERIC
================================================
Ex01: In danh sách mảng - giới hạn với Number, CharSequence
Ex02: In danh sách List<T> - giới hạn Number, CharSequence
Ex03: Tạo cấu trúc dữ liệu CustomerList<T>
Ex04: Thực hành với Willcard - extends, super

Phần 3: MAP
================================================
Ex01: Tạo map lưu trữ danh sách biển số xe tại VN
+ Map<Integer, String> model = new HashMap, LinkedHashMap, TreeMap
+ Tao tác cơ bản với put, putIfAbsent, get, getOrDefault
+ Duyệt key, value, entry
+ Phân biệt HashMap, LinkedHashMap, TreeMap

Ex02: Sắp xếp theo Key, Value
+ TreeMap: Key
+ SelfSort: Entry<Key, Value>

Ex03: Tạo map với key là đối tượng mình sở hữu
Map<Employee, List<Employee>> teams = new HashMap<>();
Employee: id, name, salary, managerId

List<Employee> flist = Arrays.asList(new Employee(11, "A", 50, 1), new Employee(12, "B", 50, 1));
List<Employee> slist = Arrays.asList(new Employee(21, "C", 30, 2), new Employee(22, "D", 10, 2));
List<Employee> tlist = Arrays.asList(new Employee(31, "E", 10, 3), new Employee(32, "F", 10, 3));

Map<Employee, List<Employee>> teams = new HashMap<>();
teams.put(new Employee(1, "John", 100, null), flist);
teams.put(new Employee(2, "Smith", 150, null), slist);
teams.put(new Employee(3, "Andy", 200, null), tlist);
		
teams.put(new Employee(1, "John", 100, null), tlist);
System.out.println("size: " + teams.size());

Phần 4: SET
================================================
Ex01: Tương tự với Map - HashCode, Equals
>>> Ôn tập Generic, List, Set, Map


